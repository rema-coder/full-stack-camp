using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace _1
{
    public class node
    {
        //first thing we need a constructer
        // node (object data, node next)
        public node(object data, node next = null)
        {
            this.Data = data;
            this.Next = next;
        }

        //private;
        //object data contains the data of the node what we want to store in the list 
        private object data;
        //node next refrence to the next data in the list
        private node next;
        //public;
        //data - get/set the data field
        public object Data
        {
            get { return this.data; }
            set { this.data = value; }
        }
        //next - get/set the next field
        public node Next
        {
            get { return this.next; }
            set { this.next = value; }
        }
    }
    public class linkedlist
    {
        public node Next { get; set; }
        //constructer;
        //linkedlist()-intialize the privet field
        public linkedlist()
        {
            this.head = null;
            this.size = 0;
        }
        //private field:
        //node head 
        private node head;
        //[]int size - the current size of the list
        private int size;

        //public:
        // empty - if the list is empty
        public bool empty
        {
            get { return this.size == 0; }
        }
        // count how many item are in the list
        public void is_size()
        {
                node curr = head;
                int x = 0;
                while (curr != null)
                {
                    curr = curr.Next;
                    x++;
                    
                }
            Console.WriteLine("the count is "+x);
        }

        //to display the element
        public void display()
        {
            node currentnode = this.head;

            while (currentnode != null)
            {
                Console.Write(currentnode.Data + "->");
                currentnode = currentnode.Next;

            }
            Console.WriteLine("null");
        }
        //to add new element
        public void add(string data)
        {
            //we will define the new element
            node newnode = new node(data);
            if (head == null)
            {
                head = newnode;

            }
            else
            {
                node lastNode = head;
                while (lastNode.Next != null)
                {
                    lastNode = lastNode.Next;
                }
                lastNode.Next = newnode;
            }
        }
        // method to add element at any pothion we want
        public void addpot (string data,int y)

        {
            node newnode = new node (data);
            if (y == 0)
            {
                newnode.Next = head;
                head = newnode;
            }
            else
            {
                node current = head;
                for (int i = 0; i < y-1; i++)
                {
                    if (current == null) return;
                    current = current.Next; 
                }
                newnode.Next = current.Next;
                current.Next = newnode;
            }
            size++;
        }
        // methode to reverse the linkedlist
        public void reverse()
        {
            node current = head;
            node next = null;
            node prev = null;
            while (current != null)
            {
                next = current.Next;   //store the next node
                current.Next = prev;   //reverse the pointer
                prev = current; //the prev move one step forward
                current = next; //current move step forward
            }
            head = prev;
        }
        //methode to insert at the beggining
        public void addatbeggining(string data)
        {
            node newnode = new node (data);
            newnode.Next = head;
            head = newnode;
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            linkedlist list = new linkedlist();
            //Console.WriteLine("is it empty?" + list.empty);
            list.add("reema");
            list.add("ragheed");
            list.add("ali");
            list.display();
            //list.reverse();
            // list.display();
            //list.is_size();
            //list.addpot("third", 0);
            //list.display();
            list.addatbeggining("helloo");
            list.display();
            Console.ReadLine();
        }
    }
}
