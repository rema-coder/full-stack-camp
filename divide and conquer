Sort an Array of Integers
Given an array of integers, implement quicksort to sort the array in ascending order.
*
 * make function that do the swap
 *
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] array = { 3, 6, 8, 10, 1, 2, 1 };
            quicksort(array,0,array.Length -1);
            Console.WriteLine(string.Join(", ", array));
        }
        //this finction is for the quick sort it take the first and the last element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static public void quicksort(int[] array,int low, int high) { 
            if (low < high) {
                int p =partition(array, low, high);
                quicksort(array,low,p-1);
                quicksort(array,p+1,high);
            }

        }
        //now this for seperate the two side and return it to the quick sort function
        static int partition(int[] array, int low, int high) { 
            int piviot = array[low];
            int i = low ;
            for (int j = low+1; j <= high; j++)
            {
                if (array[j] < piviot)
                {
                    i++;
                    swap(array,i, j);
                }
            }
            swap(array, low, i);
            return i;
        }
        static public void swap(int[] arr, int index, int j)
        {
            int x = arr[index];
            arr[index] = arr[j];
            arr[j] = x;
         

        }
            
    }
}
 Sort an Array of Strings by Length
/*
 * for this question is the same just gonna change the int to string 
 *and use .lenght
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] array = { "apple", "banana", "kiwi", "cherry", "mango" };
            quicksort(array,0,array.Length -1);
            Console.WriteLine(string.Join(", ", array));
        }
        //this finction is for the quick sort it take the first and the last element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static public void quicksort(string[] array,int low, int high) { 
            if (low < high) {
                int p =partition(array, low, high);
                quicksort(array,low,p-1);
                quicksort(array,p+1,high);
            }

        }
        //now this for seperate the two side and return it to the quick sort function
        static int partition(string[] array, int low, int high) { 
            string piviot = array[low];
            int i = low ;
            for (int j = low+1; j <= high; j++)
            {
                if (array[j].Length < piviot.Length)
                {
                    i++;
                    swap(array,i, j);
                }
            }
            swap(array, low, i);
            return i;
        }
        static public void swap(string[] arr, int index, int j)
        {
            string x = arr[index];
            arr[index] = arr[j];
            arr[j] = x;
         

        }
            
    }
}
Sort an Array of Doubles
/*
 * for this question is the same just gonna change the int to double 
 *
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            double[] array = {3.5, 2.1, 4.6, 5.0, 1.2};
            quicksort(array,0,array.Length -1);
            Console.WriteLine(string.Join(", ", array));
        }
        //this finction is for the quick sort it take the first and the last element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static public void quicksort(double[] array,int low, int high) { 
            if (low < high) {
                int p =partition(array, low, high);
                quicksort(array,low,p-1);
                quicksort(array,p+1,high);
            }

        }
        //now this for seperate the two side and return it to the quick sort function
        static int partition(double[] array, int low, int high) { 
            double piviot = array[low];
            int i = low ;
            for (int j = low+1; j <= high; j++)
            {
                if (array[j] < piviot)
                {
                    i++;
                    swap(array,i, j);
                }
            }
            swap(array, low, i);
            return i;
        }
        static public void swap(double[] arr, int index, int j)
        {
            double x = arr[index];
            arr[index] = arr[j];
            arr[j] = x;
         

        }
            
    }
}
Merge and Sort Two Arrays
Given two sorted arrays, implement mergesort to merge and sort them into a single sorted array.
Example: Input: [1, 3, 5], [2, 4, 6] -> Output: [1, 2, 3, 4, 5, 6]
/*
 sort two array
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] array11 = {1,3,5};
            int[] array12 = {2,4,6};
            int[] array =mergesort(array11, array12);

            Console.WriteLine(string.Join(", ", array));
        }
        //this function is for the merge sort it take the left and the right element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static int[] mergesort(int[] array1,int[]array2)
        {
            int n1 = array1.Length;
            int n2 = array2.Length;
            int[] mergedArray = new int[n1 + n2];

            int i = 0, j = 0, k = 0;

            // Merge arrays while there are elements in both 
            while (i < n1 && j < n2)
            {
                if (array1[i] <= array2[j])
                {
                    mergedArray[k] = array1[i];
                    i++;
                }
                else
                {
                    mergedArray[k] = array2[j];
                    j++;
                }
                k++;
            }

            // Copy the remaining elements of array1
            while (i < n1)
            {
                mergedArray[k] = array1[i];
                i++;
                k++;
            }

            // Copy the remaining elements of array2
            while (j < n2)
            {
                mergedArray[k] = array2[j];
                j++;
                k++;
            }

            return mergedArray;
        }
    }

}
        

Sort an Array of Integers
Given an array of integers, implement mergesort to sort the array in ascending order.
Example: Input: [38, 27, 43, 3, 9, 82, 10] -> Output: [3, 9, 10, 27, 38, 43, 82]
/*
 * 
 *
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] array = { 38, 27, 43, 3, 9, 82, 10 };
            mergesort(array, 0, array.Length - 1);
            Console.WriteLine(string.Join(", ", array));
        }
        //this finction is for the merge sort it take the left and the right element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static public void mergesort(int[] array, int l, int r)
        {
            if (l < r)
            {
                int mid = (l + r) / 2;
                mergesort(array, l, mid);
                mergesort(array, mid + 1, r);

                //merge the sorted halves
                merge(array, l, mid, r);
            }

        }
        static void merge(int[] array, int left, int mid, int right)
        {
            int n1 = mid - left + 1;
            int n2 = right - mid;

            // Create temp arrays
            int[] leftArray = new int[n1];
            int[] rightArray = new int[n2];

            // Copy data to temporary arrays
            Array.Copy(array, left, leftArray, 0, n1);
            Array.Copy(array, mid + 1, rightArray, 0, n2);

            // Merge the tempo arrays into the original array
            int i = 0, j = 0, k = left;
            while (i < n1 && j < n2)
            {
                if (leftArray[i] <= rightArray[j])
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else
                {
                    array[k] = rightArray[j];
                    j++;
                }
                k++;
            }

            //copy the remaining element of left 
            while (i < n1)
            {
                array[k] = leftArray[i];
                i++;
                k++;
            }

            // Copy the remaining elements of right
            while (j < n2)
            {
                array[k] = rightArray[j];
                j++;
                k++;
            }


        }
    }
}
Sort an Array of Floating Points
/*
 * Sort an Array of Floating Points
 *????? ?? ???? ?? ??????? ??? ????
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            float[] array = { 3.1f, 2.2f, 1.3f, 5.4f, 4.5f };
            mergesort(array, 0, array.Length - 1);
            Console.WriteLine(string.Join(", ", array));
        }
        //this finction is for the merge sort it take the left and the right element 
        //ind check if there still element or not
        //and quick the left and the right element by recursion
        static public void mergesort(float[] array, int l, int r)
        {
            if (l < r)
            {
                int mid = (l + r) / 2;
                mergesort(array, l, mid);
                mergesort(array, mid + 1, r);

                //merge the sorted halves
                merge(array, l, mid, r);
            }

        }
        static void merge(float[] array, int left, int mid, int right)
        {
            int n1 = mid - left + 1;
            int n2 = right - mid;

            // Create temp arrays
            float[] leftArray = new float[n1];
            float[] rightArray = new float[n2];

            // Copy data to temporary arrays
            Array.Copy(array, left, leftArray, 0, n1);
            Array.Copy(array, mid + 1, rightArray, 0, n2);

            // Merge the tempo arrays into the original array
            int i = 0, j = 0, k = left;
            while (i < n1 && j < n2)
            {
                if (leftArray[i] <= rightArray[j])
                {
                    array[k] = leftArray[i];
                    i++;
                }
                else
                {
                    array[k] = rightArray[j];
                    j++;
                }
                k++;
            }

            //copy the remaining element of left 
            while (i < n1)
            {
                array[k] = leftArray[i];
                i++;
                k++;
            }

            // Copy the remaining elements of right
            while (j < n2)
            {
                array[k] = rightArray[j];
                j++;
                k++;
            }


        }
    }
}
