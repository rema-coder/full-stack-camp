using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace double_linked_list
{
    public class doublnode
    {
        //make a constructer
        public object Data { get; set; }
        public doublnode Next { get; set; }
        public doublnode Previos { get; set; }
        public doublnode(object data, doublnode next = null, doublnode prev = null)
        {
            this.Data = data;
            this.Next = next;
            this.Previos = prev;
        }
    }
    public class doublelinkedlist
    {
        private doublnode head;
        private doublnode tail;
        private int size;
        public doublelinkedlist()
        {
            this.head = null;
            this.tail = null;
            this.size = 0;
        }
        //to add new element
        public void add(string data)
        {
            doublnode newnode = new doublnode(data);
            if (head == null)
            {
                head = newnode;
                tail = newnode;
            }
            else
            {
                tail.Next = newnode;
                newnode.Previos = tail;
                tail = newnode;
            }
        }
        //to display the element
        public void display()
        {
            doublnode current = head;
            while (current != null)
            {
                Console.Write(current.Data + "->");
                current = current.Next;
            }
            Console.Write("null");

        }
        // reverse
        public void reverse()
        {
            doublnode temp = null;
            doublnode current = head;
            while (current != null)
            {
                temp = current.Previos; //store the next node
                current.Previos = current.Next; //reverse the pointer
                current.Next = temp;
                current = current.Previos;
            }
            head = temp.Previos;


        }
        //count the element
        public void count()
        {
            doublnode current = head;
            int count = 0;
            while (current != null)
            {
                count++;
                current = current.Next;
            }
            Console.WriteLine(count);
        }
        //insert at any pothion
        public void insert(string data, int index)
        {
            doublnode newnode = new doublnode(data);
            if (index == 0)
            {
                head = newnode;
            }
            else
            {
                doublnode current = head;
                for (int i = 0; i < index; i++)
                {
                    current = current.Next;
                }
                newnode.Next = current.Next;
                current.Next = newnode;

            }
            size++;
        }
        //insert at the begining
        public void begginig(string data)
        {
            doublnode newnode = new doublnode(data);
            newnode.Next = head;
            head = newnode;

        }
        // at the end
        public void end(string data)
        {
            doublnode newnode = new doublnode(data);
            doublnode current = head;
            if (head == null)
            {
                head = newnode;
                return;
            }
            while (current.Next != null)
            {
                current = current.Next;
            }
            current.Next = newnode;

        }
        //get anode 
        public void get_node(int index)
        {
            doublnode current = head;
            for (int i = 0; i < index; i++)
            {
                i++;
                current = current.Next;
            }
            current = current.Next;
            Console.WriteLine(current.Data);
        }
        //find an index that match the element
        public int find(string data)
        {
            doublnode newnode = new doublnode(data);
            doublnode current = head;
            int index = 0;
            while (current != null)
            {
                if (current.Data.Equals(data))
                {
                    return index;
                }
                {
                    index++;
                    current = current.Next;
                }
            }
            return -1;
        }
        //check if its empty
        public bool empty()
        {
            if (head == null)
            {
                return true;
            }
            return false;
        }
        //empty a singly linked list by pointing the head towards null.
        public void empty_thelist()
        {
            head.Next = null;
            head = null;
        }
        //removes the node from the singly linked list at the specified index.
        public void remove(int x)
        {
            doublnode current = head;
            int counter = 0;
            while (current != null)
            {
                if (counter != x)
                {
                    counter++;
                    current = current.Next;
                }
                else
                {
                    current.Data = null;
                    counter++;
                    current = current.Next;

                }
            }

        }
        // remove first element from a Singly Linked list.
        public void remove_head()
        {
            head.Data = null;
        }
        //remove the tail
        public void remove_tail()
        {
            doublnode current = head;
            while (current.Next != null)
            {
                current = current.Next;
            }
            current.Data = null;
        }
        //convert in to string
        public string into_string()
        {
            string x = "";
            doublnode current = head;
            while (current != null)
            {
                x += current.Data.ToString();
                current = current.Next;
            }
            return x;

        }
        //find if the element is present in the list
        public bool elementcheck(string data)
        {
            doublnode current = head;
            int counter = 0;
            while (current != null)
            {

                if (current.Data.Equals(data))
                {
                    return true;
                }
                else
                {
                    counter++;
                    current = current.Next;
                }
            }
            return false;

        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            doublelinkedlist list = new doublelinkedlist();
            list.add("reema");
            list.add("ragheed");
            list.add("ali");
            list.reverse();
            list.count();
            list.insert("hi", 1);
            list.begginig("why");
            list.end("end");
            list.get_node(3);
            Console.WriteLine(list.find("hi"));
            Console.WriteLine(list.empty());
                //list.empty_thelist();
            list.display();
            list.remove(2);
            list.display();
                        
        }
    }
}
